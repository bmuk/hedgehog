;; Test AVL-tree routines.  Compile with `hhc -p - avl.hl'.

(def (deflt-cmpfun a b)
     (default-cmpfun a b))

(def (avl-get tree cmpfun key default-value)
     (if tree
	 (do (set cmp (cmpfun key (avl-key tree)))
	     (if (< cmp 0)
		 (avl-get (avl-left tree) cmpfun key default-value)
	       (if (> cmp 0)
		   (avl-get (avl-right tree) cmpfun key default-value)
		 (avl-value tree))))
       default-value))
       

(def (avl-put tree cmpfun key value)
     (if tree
	 (do (set cmp (cmpfun key (avl-key tree)))
	     (if (< cmp 0)
		 (avl-make-node (avl-key tree)
				(avl-value tree)
				(avl-put (avl-left tree) cmpfun key value)
				(avl-right tree))
	       (if (> cmp 0)
		   (avl-make-node (avl-key tree)
				  (avl-value tree)
				  (avl-left tree)
				  (avl-put (avl-right tree) cmpfun key value))
		 (avl-make-node key
				value
				(avl-left tree)
				(avl-right tree)))))
       (avl-make-node key
		      value
		      nil 
		      nil)))


(def (avl-put-list tree cmpfun list)
     (print tree "\n")
     (if list
	 (do (set key (car (car list)))
	     (set value (car (cdr (car list))))
	     (print "Put key " key " value " value "\n")
	     (avl-put-list (avl-put tree cmpfun key value) 
			   cmpfun
			   (cdr list)))
       tree))

(set data
     '((1 "yksi")
       (2 "kaksi")
       (3 "kolme")
       (4 "neljä")
       (5 "viisi")
       (6 "kuusi")
       (7 "seitsemän")
       (8 "kahdeksan")
       (9 "yhdeksän")
       (10 "kymmenen")
       (20 "kaksikymmentä")
       (19 "yhdeksäntoista")
       (18 "kahdeksantoista")
       (17 "seitsemäntoista")
       (16 "kuusitoista")
       (15 "viisitoista")
       (14 "neljätoista")
       (13 "kolmetoista")
       (12 "kaksitoista")
       (11 "yksitoista")))

(set tree (avl-put-list nil deflt-cmpfun data))

(def (avl-gets tree key)
     (set value (avl-get tree deflt-cmpfun key nil))
     (print "Get " key " found " value "\n")
     (if value
	 (avl-gets tree (+ key 1))))

(avl-gets tree 1)


(def (default-avl-put-list tree list)
     (print tree "\n")
     (if list
	 (do (set key (car (car list)))
	     (set value (car (cdr (car list))))
	     (print "Put key " key " value " value "\n")
	     (default-avl-put-list (default-avl-put tree key value)
				   (cdr list)))
       tree))

(def (default-avl-gets tree key)
     (set value (default-avl-get tree key nil))
     (print "Get " key " found " value "\n")
     (if value
	 (default-avl-gets tree (+ key 1))))

(set tree2 (default-avl-put-list nil data))

(default-avl-gets tree2 1)
