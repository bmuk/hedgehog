;; Tests written by Lars Wirzenius
;; hedgehog-test-and-benchmark-1.1/test.lisp
;; Enabled some tests that failed for the old lisp // Cessu

; Helper functions for testing.

(def-syntax (fail-if ?expr)
    (if ?expr
	(panic "\nERROR: Condition " (quote ?expr) " true.\n")))


; Test basic arithmetic and bitwise operations.


(fail-unless-equal (+ 0) 0)
(fail-unless-equal (+ 0 1) 1)
(fail-unless-equal (+ 0 1 2) 3)
(fail-unless-equal (+ 0 1 2 -1) 2)
(fail-unless-equal (+ 0 1 2 0x3) 6)

(fail-unless-equal (- 1) -1)
(fail-unless-equal (- 0 1) -1)
(fail-unless-equal (- 0 1 2) -3)
(fail-unless-equal (- 0 1 2 -1) -2)
(fail-unless-equal (- 0 1 2 0x3) -6)

(fail-unless-equal (* 1) 1)
(fail-unless-equal (* 0 1) 0)
(fail-unless-equal (* 1 2) 2)
(fail-unless-equal (* 1 2 -1) -2)
(fail-unless-equal (* 1 2 0x3) 6)

(fail-unless-equal (/ 8 2) 4)
(fail-unless-equal (/ 8 2 2) 2)

(fail-unless-equal (% 8 2) 0)
(fail-unless-equal (% 8 3) 2)
(fail-unless-equal (% 8 7) 1)

(fail-unless-equal (<< 1 0) 1)
(fail-unless-equal (<< 1 1) 2)
(fail-unless-equal (<< 2 1) 4)
(fail-unless-equal (<< 1 3) 8)

(fail-unless-equal (>> 1 0) 1)
(fail-unless-equal (>> 1 1) 0)
(fail-unless-equal (>> 2 1) 1)

; Old hoglisp doesn't guarantee this. New one will.
(fail-unless-equal (>> 0xffffffff 1) 0x7fffffff)

(fail-unless-equal (| 0 0) 0)
(fail-unless-equal (| 0 1) 1)
(fail-unless-equal (| 1 1) 1)
(fail-unless-equal (| 1 2) 3)

(fail-unless-equal (& 0 0) 0)
(fail-unless-equal (& 0 1) 0)
(fail-unless-equal (& 1 1) 1)
(fail-unless-equal (& 1 2) 0)
(fail-unless-equal (& 1 3) 1)

(fail-unless-equal (^ 0 0) 0)
(fail-unless-equal (^ 0 1) 1)
(fail-unless-equal (^ 1 1) 0)
(fail-unless-equal (^ 1 2) 3)
(fail-unless-equal (^ 1 3) 2)

(fail-unless-equal (~ 0) 0xffffffff)
(fail-unless-equal (~ 0xffffffff) 0)
(fail-unless-equal (~ 1) 0xfffffffe)



; Boolean operations.

(fail-if nil)
(fail-if 0)

; The old implementation treats "" as false, the new as true. This
; difference is OK.
; (fail-unless "")

(fail-unless (cons 0 0))
(fail-unless 1)
(fail-unless "foo")

(fail-if (and 0 0))
(fail-if (and 0 1))
(fail-if (and 1 0))
(fail-unless (and 1 1))

(fail-if (or 0 0))
(fail-unless (or 0 1))
(fail-unless (or 1 0))
(fail-unless (or 1 1))

(fail-unless (not 0))
(fail-if (not 1))



; Misc. builtin operations.

(fail-unless-equal (list) nil)
(fail-unless-equal (list 0) '(0))
(fail-unless-equal (list 0 1) '(0 1))
(fail-unless-equal (list 0 1 2) '(0 1 2))



; Comparison functions.

(fail-if     (< 0 0))
(fail-unless (< 0 1))
(fail-if     (< 0 -1))

(fail-unless (<= 0 0))
(fail-unless (<= 0 1))
(fail-if     (<= 0 -1))

(fail-unless (= 0 0))
(fail-if     (= 0 1))
(fail-if     (= 0 -1))

(fail-if     (> 0 0))
(fail-if     (> 0 1))
(fail-unless (> 0 -1))

(fail-unless (>= 0 0))
(fail-if     (>= 0 1))
(fail-unless (>= 0 -1))

(fail-if     (!= 0 0))
(fail-unless (!= 0 1))
(fail-unless (!= 0 -1))


; List functions.

(fail-unless-equal (cons 0 nil) '(0))
(fail-unless-equal (cons 0 (cons 1 nil)) '(0 1))

(fail-unless-equal (car (cons 0 1)) 0)
(fail-unless-equal (cdr (cons 0 1)) 1)

(fail-unless-equal (nth '(1 2 3 4) 0) 1)
(fail-unless-equal (nth '(1 2 3 4) 1) 2)
(fail-unless-equal (nth '(1 2 3 4) 2) 3)
(fail-unless-equal (nth '(1 2 3 4) 3) 4)
(fail-unless-equal (nth '(1 2 3 4) 4) nil)


; String operations.

(fail-unless-equal (strlen "") 0)
(fail-unless-equal (strlen "a") 1)
(fail-unless-equal (strlen "ab") 2)
(fail-unless-equal (strlen "abc") 3)
(fail-unless-equal (strlen "abcd") 4)
(fail-unless-equal (strlen "abcde") 5)

(fail-unless-equal (substr "" 0 0) "")
(fail-unless-equal (substr "" 0 1) "")
(fail-unless-equal (substr "" 1 1) "")

(fail-unless-equal (substr "abcdef" 0 0) "")
(fail-unless-equal (substr "abcdef" 0 1) "a")
(fail-unless-equal (substr "abcdef" 0 2) "ab")
(fail-unless-equal (substr "abcdef" 0 3) "abc")
(fail-unless-equal (substr "abcdef" 0 4) "abcd")
(fail-unless-equal (substr "abcdef" 0 5) "abcde")
(fail-unless-equal (substr "abcdef" 0 6) "abcdef")
(fail-unless-equal (substr "abcdef" 0 7) "abcdef")
(fail-unless-equal (substr "abcdef" 0 -1) "abcdef")

(fail-unless-equal (substr "abcdef" 3 0) "")
(fail-unless-equal (substr "abcdef" 3 1) "d")
(fail-unless-equal (substr "abcdef" 3 2) "de")
(fail-unless-equal (substr "abcdef" 3 3) "def")
(fail-unless-equal (substr "abcdef" 3 4) "def")
(fail-unless-equal (substr "abcdef" 3 5) "def")
(fail-unless-equal (substr "abcdef" 3 6) "def")
(fail-unless-equal (substr "abcdef" 3 7) "def")
(fail-unless-equal (substr "abcdef" 3 -1) "def")

(fail-unless-equal (substr "abcdef" 9 0) "")
(fail-unless-equal (substr "abcdef" 9 1) "")
(fail-unless-equal (substr "abcdef" 9 2) "")
(fail-unless-equal (substr "abcdef" 9 -1) "")

(fail-unless-equal (strcmp "" "") 0)
(fail-unless-equal (strcmp "" "a") -1)
(fail-unless-equal (strcmp "" "ab") -1)
(fail-unless-equal (strcmp "" "\xff") -1)

(fail-unless-equal (strcmp "a" "") 1)
(fail-unless-equal (strcmp "a" "a") 0)
(fail-unless-equal (strcmp "a" "ab") -1)
(fail-unless-equal (strcmp "a" "\xff") -1)

(fail-unless-equal (strcmp "ab" "") 1)
(fail-unless-equal (strcmp "ab" "a") 1)
(fail-unless-equal (strcmp "ab" "ab") 0)

; The following fail on the old implentation, though they shouldn't.
(fail-unless-equal (strcmp "ab" "\xff") -1)
(fail-unless-equal (strcmp "\xff" "ab") 1)

(fail-unless-equal (strcmp "\xff" "") 1)
(fail-unless-equal (strcmp "\xff" "a") 1)
(fail-unless-equal (strcmp "\xff" "\xff") 0)


(fail-unless-equal (ord "abc") 97)
(fail-unless-equal (ord "\xff") 255)


(fail-unless-equal (chr 97) "a")
(fail-unless-equal (chr 255) "\xff")


(fail-unless-equal (strcat) "")
(fail-unless-equal (strcat "a") "a")
(fail-unless-equal (strcat "a" "b") "ab")
(fail-unless-equal (strcat "a" "b" "c") "abc")


(print "All tests completed.\n")
