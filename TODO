# This file is part of Hedgehog
#
# Author: Kenneth Oksanen <cessu@iki.fi>
#

Improve documentation.

A web server demo.

A monitor state machine.  It is distinct from normal user-level state
machines in the sense that 

More system calls:
  stat?
  wait/waitpid
  ioctl? pipe?
(Note that the intention of Hedgehog is /NOT/ to support all system
calls - we're primarily interested in small M2M boxes where, for
example, root is the only user and chown is therefore pretty
useless...  But if someone really starts to use Hedgehog in other apps
as well, then we'll listen and hopefully include their contribs.  If
the number of system calls and subsequently the system requirements
become painfully large, group then under suitable #ifdefs.)

Allocate the memory needed by unix-exec from the semispace.  
Or use the old semispace (nah, bad idea, because we may wish to change
to a singlespace collector some day).
  
Signed/unsigned in interface-gen.pl.  Causes problems in
(def-syntax unix-CRTSCTS -2147483648)

Replace requirement for perl (in prelude.d/interface-gen.pl) and gawk
(in hh_seed.awk and hh_version.awk) with python, which is already used
in generating the document.

Add more constant folding rules to hh_opt.c

Add a small, concise compression/decompression algorithm.  It should
be usable both from byte code instructions to compress/decompress
strings, and from the main program to decompress byte code files.
Probably the best solution is something based on the Burrows-Wheeler
transform.

Add small, concise cryptographic hash and cipher algorithm(s).  SHA,
AES, and DES, perhaps?

Instead of having each instruction check its arguments, perhaps we
should go towards a design where a special typecheck instruction
checks the type of the one argument in accu.  The drawback is that
typechecking becomes much more costly in terms of CPU (the number of
dispatched instructions almost doubles), but the benefit is that the
size of the typechecking byte code interpreter would decrease
significantly.  It is possible that compiler optimizations (partial
type inference) and perhaps statically type checked annotations will
reduce the performance overhead.
  
/Cheap/ live-precise gc.

Singlespace unidirectional collector.

Spend a good while improving the language:
  - syntax: pattern matching etc.
  - typing: have optional static typing, classes.
